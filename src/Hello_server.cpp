// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Hello.h"
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/THttpServer.h>
#include <thrift/transport/THttpTransport.h>
#include <thrift/protocol/TJSONProtocol.h>
#include <iostream>

using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::Hello;

class HelloHandler : virtual public HelloIf {
 public:
  HelloHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    cout << "ping()" << endl;
  }

  void message(std::string& _return, const std::string& message) {
    // Your implementation goes here
    cout << "Message: " << message << endl;
    _return = "Hello "+ message;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<HelloHandler> handler(new HelloHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new HelloProcessor(handler));

  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> httpTransportFactory(new THttpServerTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> jsonProtocolFactory(new TJSONProtocolFactory());

  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
//  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
//  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, httpTransportFactory, jsonProtocolFactory);
  server.serve();
  return 0;
}
